{"version":3,"sources":["components/Country.jsx","components/Continent.jsx","components/Continents.jsx","App.js","serviceWorker.js","index.js"],"names":["Country","country","this","props","react_default","a","createElement","key","code","name","phone","emoji","languages","length","map","language","React","PureComponent","Continent","continent","className","countries","Country_Country","client","ApolloClient","uri","GET_CONTINENTS","gql","_templateObject","Continents","state","onContinentChange","event","_this","setState","target","value","_this2","react_apollo_esm","query","_ref","loading","error","data","message","onChange","continents","_templateObject2","_ref2","Continent_Continent","Component","App","Continents_Continents","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sUAEqBA,0LACV,IACCC,EAAYC,KAAKC,MAAjBF,QACR,OACEG,EAAAC,EAAAC,cAAA,MAAIC,IAAKN,EAAQO,MAEfJ,EAAAC,EAAAC,cAAA,2BAAmBL,EAAQQ,MAC3BL,EAAAC,EAAAC,cAAA,yBAAiBL,EAAQS,OACzBN,EAAAC,EAAAC,cAAA,oBAAYL,EAAQU,OACnBV,EAAQW,UAAUC,OAAS,EAAIT,EAAAC,EAAAC,cAAA,wBAAeF,EAAAC,EAAAC,cAAA,MAAIC,IAAKN,EAAQO,MAC7DP,EAAQW,UAAUE,IAAI,SAACC,GACtB,OACEX,EAAAC,EAAAC,cAAA,MAAIC,IAAKQ,EAASP,MAAOO,EAASN,UAIhC,aAhBqBO,IAAMC,gBCCtBC,mLACV,IACCC,EAAcjB,KAAKC,MAAnBgB,UACR,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aACbhB,EAAAC,EAAAC,cAAA,UAAKa,EAAUV,MACfL,EAAAC,EAAAC,cAAA,+BAIEa,EAAUE,UAAUP,IAAI,SAACb,GACvB,OAAOG,EAAAC,EAAAC,cAACgB,EAAD,CAASrB,QAASA,EAASM,IAAKN,EAAQO,iBAXpBQ,IAAMC,kYCG7C,IAAMM,EAAS,IAAIC,IAAa,CAC9BC,IAAK,uCAIDC,EAAiBC,IAAHC,KA4BCC,6MACnBC,MAAQ,CACNX,UAAW,MAGbY,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CAAEf,UAAWa,EAAMG,OAAOC,iFAGjC,IA7BmB5B,EA6BnB6B,EAAAnC,KACP,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,MAAOb,EAAgBH,OAAQA,GACnC,SAAAiB,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAClB,OAAIF,EAAgBrC,EAAAC,EAAAC,cAAA,kCAChBoC,EAActC,EAAAC,EAAAC,cAAA,SAAIoC,EAAME,SAE1BxC,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,UAAQ8B,MAAOC,EAAKP,MAAM7B,QAAS4C,SAAUR,EAAKN,mBACpDY,EAAKG,WAAWhC,IAAI,SAAAK,GAAS,OAC5Bf,EAAAC,EAAAC,cAAA,UAAQC,IAAKY,EAAUX,KAAM4B,MAAOjB,EAAUX,MAC3CW,EAAUV,YAOG,KAAzBP,KAAK4B,MAAMX,UACVf,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAhDa/B,EAgDeN,KAAK4B,MAAMX,UAhDjBQ,IAAVoB,IAERvC,IA8C+Ce,OAAQA,GAC/D,SAAAyB,GAA8B,IAA3BP,EAA2BO,EAA3BP,QAASC,EAAkBM,EAAlBN,MAAOC,EAAWK,EAAXL,KAClB,OAAIF,EAAgBrC,EAAAC,EAAAC,cAAA,qCAChBoC,EAActC,EAAAC,EAAAC,cAAA,SAAIoC,EAAME,SACrBxC,EAAAC,EAAAC,cAAC2C,EAAD,CAAW9B,UAAWwB,EAAKxB,cAGpC,aAnC4B+B,aCxBzBC,MAXf,WACE,OACE/C,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACbhB,EAAAC,EAAAC,cAAA,UAAQc,UAAU,cAChBhB,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAC8C,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5c38ad65.chunk.js","sourcesContent":["import React from 'react';\nimport './continent.css'\nexport default class Country extends React.PureComponent {\n  render() {\n    const { country } = this.props\n    return (\n      <ul key={country.code}>\n\n        <li>Country Name: {country.name}</li>\n        <li>Phone Code: {country.phone}</li>\n        <li>emoji: {country.emoji}</li>\n        {country.languages.length > 0 ? <li>Languages: <ol key={country.code}>\n          {country.languages.map((language) => {\n            return (\n              <li key={language.code}>{language.name}</li>\n            )\n          })}\n        </ol>\n        </li> : null}\n      </ul>\n    )\n  }\n}\n","import React from 'react';\nimport './continent.css'\nimport Country from './Country'\nexport default class Continent extends React.PureComponent {\n  render() {\n    const { continent } = this.props\n    return (\n      <div className='continent'>\n        <h2>{continent.name}</h2>\n        <h4>List of countries</h4>\n\n        {\n\n          continent.countries.map((country) => {\n            return <Country country={country} key={country.code} />\n          })\n        }\n\n      </div>\n    )\n\n  }\n\n}","import ApolloClient from 'apollo-boost';\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport Continent from './Continent'\n// initialize a GraphQL client\nconst client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com'\n});\n\n// write a GraphQL query that asks for names and codes for all countries\nconst GET_CONTINENTS = gql`\n {\n  continents {\n    code\n    name\n  }\n}\n`;\nconst getContinnentDetails = (code) => gql`\n{\n continent (code: \"${code}\") {\n  name\n  countries {\n    code\n    name\n    native\n    phone\n    currency\n    emoji\n    emojiU\n    languages {\n      name\n    }\n  }\n}\n}\n`;\n\nexport default class Continents extends Component {\n  state = {\n    continent: ''\n  };\n\n  onContinentChange = event => {\n    this.setState({ continent: event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <Query query={GET_CONTINENTS} client={client}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>Loading... Continents</p>;\n            if (error) return <p>{error.message}</p>;\n            return (\n              <div><select value={this.state.country} onChange={this.onContinentChange}>\n                {data.continents.map(continent => (\n                  <option key={continent.code} value={continent.code}>\n                    {continent.name}\n                  </option>\n                ))}\n              </select></div>\n            );\n          }}\n        </Query>\n        {this.state.continent !== '' ?\n          <Query query={getContinnentDetails(this.state.continent)} client={client}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>Loading...Continent Info</p>;\n              if (error) return <p>{error.message}</p>;\n              return <Continent continent={data.continent} />\n            }}\n          </Query>\n          : null}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Continents from './components/Continents'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Welcome to Graphql Continents demo.</h3>\n        <Continents />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}